# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for the Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.

name: 'Deploy VCN in OCI'

on:
  pull_request:
    types:
      - closed
    branches:
      - "main"

env:
  PROVIDER_NAME: "karthiga-sourceprovider"
  REGION: "us-phoenix-1"
  BRANCH_NAME: "main"
  STACK_NAME_VCN: "VCN_GitHubActions"
  WORKING_DIRECTORY_COMPARTMENTS: "vcn"

  REPO_URL: "https://github.com/karthigaebizon/DD-repo.git"
  TF_VERSION: "1.0.x"
  
permissions:
  contents: read

jobs:

  Stack1_VCN:
    if : github.event.pull_request.merged == true
    runs-on: [self-hosted, uhg-runner]
    environment: terraform-plan
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest

  STACK_NAME_VCN:
    runs-on: [self-hoste]
    environment: terraform-plan
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: 'Writing config files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "compartment_ocid=${{secrets.OCI_CLI_COMPARTMENT_OCID}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          echo "~/.oci/config file "
          cat ~/.oci/config
          echo " ~/.oci/key.pem file"
          cat ~/.oci/key.pem
          ls -lta ~/.oci
          ls -lta ~
          pwd
      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          #exec -l $SHELL
          echo " Fixing file permissions and testing oci"
          /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/config
          /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/key.pem
          echo " oci os ns get"
          /home/runner/bin/oci os ns get
      - name: 'Check for provider'
        run: |
          echo "SOURCE_PROVIDER_ID=$(/home/runner/bin/oci resource-manager configuration-source-provider list \
            --compartment-id ${{secrets.OCI_CLI_OMPARTMENT_OCID}} | jq '.data.items[] | select(."display-name"==env.PROVIDER_NAME).id' -r)" >> $GITHUB_ENV
      - name: 'S3.1 Check for existing stack VCN'
        run: |
          echo "STACK_ID_VCN=$(/home/runner/bin/oci resource-manager stack list --all --compartment-id ${{secrets.OCI_CLI_COMPARTMENT_OCID}} | jq '.data[] | select(."display-name"==env.STACK_NAME_VCN).id' -r)" >> $GITHUB_ENV

      - name: 'S3.1 Create Stack for VCN'
        if: ${{env.STACK_ID_VCN == ''}}
        run: |
          echo "STACK_ID_VCN=$(/home/runner/bin/oci resource-manager stack create-from-git-provider \
            --compartment-id ${{secrets.OCI_CLI_COMPARTMENT_OCID}} \
            --config-source-configuration-source-provider-id $SOURCE_PROVIDER_ID \
            --config-source-branch-name $BRANCH_NAME \
            --config-source-repository-url $REPO_URL \
            --display-name $STACK_NAME_VCN \
            --config-source-working-directory $WORKING_DIRECTORY_VCN \
            --terraform-version $TF_VERSION \
            --variables '{"compartment_ocid": "${{secrets.OCI_CLI_COMPARTMENT_OCID}}", "region": "${{env.OCI_REGION}}"}' \
            --wait-for-state SUCCEEDED | jq '.data.id' -r)" >> $GITHUB_ENV

      - name: 'S3.1 Update Stack for VCN'
        if: ${{env.STACK_ID_VCN != ''}}
        run: |
          /home/runner/bin/oci resource-manager stack update-from-git-provider \
            --config-source-configuration-source-provider-id $SOURCE_PROVIDER_ID \
            --stack-id $STACK_ID_VCN \
            --config-source-branch-name $BRANCH_NAME \
            --config-source-repository-url $REPO_URL \
            --config-source-working-directory $WORKING_DIRECTORY_VCN \
            --variables file://terraform/tfvars.json \
            --wait-for-state ACTIVE \
            --force

      - name: 'S3.1 Terraform Plan for the VCN'
        if: ${{env.STACK_ID_VCN != ''}}
        run: |
          echo "PLAN_JOB_ID=$(/home/runner/bin/oci resource-manager job create-plan-job \
            --stack-id $STACK_ID_VCN  | jq '.data.id' -r)" >> $GITHUB_ENV
      - name: 'Waiting for Terraform Plan to complete'
        if: ${{env.PLAN_JOB_ID != ''}}
        run: |
          while true
          do
           JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.PLAN_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
           if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
             echo "Terraform Plan: $JOB_STATUS"
             break
           elif [ "$JOB_STATUS" == "FAILED" ]; then
             echo "Terraform Plan: $JOB_STATUS"
             exit 1
           else
             echo "Terraform Plan: $JOB_STATUS"
             sleep 10
           fi
          done

      - name: "S3.1 Terraform plan output to GitHUb"
        if : ${{env.PLAN_JOB_ID != ''}}
        run: |
          /home/runner/bin/oci resource-manager job get-job-logs-content \
            --job-id $PLAN_JOB_ID --output table > ~/tfoutput.log
      - name: "S3.1 Display the terraform plan on console output"
        run: cat ~/tfoutput.log
      - name: "S3.1 Create a script to validate tf plan"
        run: |
          echo '#!/bin/sh' > ~/validate_tfplan.sh
          echo 'plan=$(grep -c "No changes. Infrastructure is up-to-date\|No changes. Your infrastructure matches the configuration" ~/tfoutput.log)' >> ~/validate_tfplan.sh  
          echo 'if [ ${plan} -ne 0 ]' >> ~/validate_tfplan.sh
          echo 'then' >> ~/validate_tfplan.sh
          echo 'echo yes' >> ~/validate_tfplan.sh
          echo 'else' >> ~/validate_tfplan.sh
          echo 'echo no' >> ~/validate_tfplan.sh
          echo 'fi' >> ~/validate_tfplan.sh
          cat ~/validate_tfplan.sh
          chmod 755 ~/validate_tfplan.sh

     # - name: "S3.1 Validate"
     #   run: echo "SKIP_TF_APPLY=$(sh ~/validate_tfplan.sh)" >> $GITHUB_ENV
     # - name: "S3.1 SKIP_APPLY from env variables is "
    #    run: echo "${{env.SKIP_TF_APPLY}}"
    #  - name: 'S3.1 Manually validate the terraform plan and approve the apply action'
     #   if: ${{env.SKIP_TF_APPLY == 'no' }}
     #   uses: uhg-actions/manual-approval@v1
      #  with:
       #   secret: ${{ secrets.REPO_TOKEN }}
          #approvers: shuk-yin-lee_uhg,sarath-ananthu_uhg,anand-gummadi_uhg,dinesh-villuri_uhg
          #minimum-approvals: 1
       #   issue-title: "Stack VCN: Deploying Terraform plan to apply"
      # - name: 'S3.1. Terraform Apply for the IAM Policies'
      #   if: ${{env.PLAN_JOB_ID != '' && env.SKIP_TF_APPLY == 'no' }}
      #   run: |
      #     echo "APPLY_JOB_ID=$(/home/runner/bin/oci resource-manager job create-apply-job \
      #       --execution-plan-strategy FROM_PLAN_JOB_ID \
      #       --execution-plan-job-id $PLAN_JOB_ID \
      #       --stack-id $STACK_ID_VCN_HUB \
      #        | jq '.data.id' -r)" >> $GITHUB_ENV
      - name: 'Wait for Terraform Apply to complete'
        if: ${{env.APPLY_JOB_ID != ''}}
        run: |
          while true
          do
            JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.APPLY_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
            if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
              echo "Terraform Apply: $JOB_STATUS"
              break
            elif [ "$JOB_STATUS" == "FAILED" ]; then
              echo "Terraform Apply: $JOB_STATUS"
              exit 1
            else
              echo "Terraform Apply: $JOB_STATUS"
              sleep 30
            fi
          done
